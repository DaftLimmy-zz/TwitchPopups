<!DOCTYPE HTML>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="tmi.min.js"></script>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Open Sans Condensed:700">

	<style>
		html, body {
			height: 100%;
			margin: 0;
			overflow: hidden;
		}

		#popuptext {
		    display: inline-block;
			font-family: 'Open Sans Condensed';
			font-weight: 700;
			color: white;
			font-size: 60px;
			margin: 0;
			padding: 0 15px;
			background-color: #00AA00;
			text-transform: uppercase;
		}

		#popupbox {
			position: absolute;
			bottom: 20px;
            left: 20px;
			right: 20px;
			transform: translateY(calc(100% + 40px));
			transition: transform .4s ease-out;
		}
	</style>

</head>

<body>

	<div id="popupbox">
	    <h1 id="popuptext"></h1>		
	</div>

</body>
    
<script type="text/javascript">

    // Define configuration options
    const opts = {
        channels: [
          "Limmy"
        ]
    };

    // Create a client with our options
    let client = new tmi.client(opts);

    // Register our event handlers (defined below)
    client.on('message', onMessageHandler);
    client.on('connected', onConnectedHandler);

    // Connect to Twitch:
    client.connect();

    //
    //
    // =========
    // ANIMATION
    // =========    
    

    // Hotseat stuff
    var hotseatuser = "";
    var hotseatison = false;
    var showing = false;
    var popupBox = document.getElementById('popupbox');
    var popupText = document.getElementById('popuptext');
    
    // Called every time a message comes in
    function onMessageHandler(target, context, msg, self) {
        // Remove whitespace from chat message
        const commandName = msg.trim();
        
        // If the command is known, let's execute it

            if (context.mod || (context["badges-raw"] != null && context["badges-raw"].startsWith("broadcaster"))) {
                if (commandName.startsWith("!alert ")) {
                    popupText.style.backgroundColor = '#00AA00';
                    popupText.innerText = commandName.substr(7);
                    doAnimation();
                } else if (commandName.startsWith("!delete")) {
                  deleteAnimation();
                } else if (commandName.startsWith("!hotseat ")) {
                  hotseatison = true;
                  hotseatuser = commandName.replace(/!hotseat @?/, '').toLowerCase();
                  popupText.style.backgroundColor = "#aa1100";
                  popupText.innerText = `ðŸ”¥ ${hotseatuser} IS IN THE HOTSEAT ðŸ”¥`;
                  doAnimation();
                }
            }
                
            if (hotseatison) {
                if (context.username == hotseatuser){
                    popupText.innerText = `ðŸ”¥ ${context['display-name']}: ${commandName} ðŸ”¥`;
                    doHotseatAnimation();
                }
            }
                
    }
        
    // Animate text
    function doAnimation() {
        if (showing) {
            // Re-hide without animation
            popupBox.style.transform = '';
            popupBox.style.transition = 'none';
            // Trigger reflow to apply updated style
            void popupBox.offsetWidth;
            // Prepare to show again with animation
            popupBox.style.transition = '';
        }
        popupBox.style.transform = 'none';
        showing = true;
    }
    
    function doHotseatAnimation() {
        popupText.style.backgroundColor = '#aa1100';
        doAnimation();
    }

    // Animate off
    function deleteAnimation() {
        hotseatison = false;
        showing = false;
        popupBox.style.transform = '';
    }

    function onConnectedHandler(addr, port) {
        console.log(`* Connected to ${addr}:${port}`);
    }
</script>
</html>