<!DOCTYPE HTML>
<html>
<head>

    <script type="text/javascript">

        // Change Limmy to your Twitch channel
        const twitchChannel = 'Limmy';

        // Your alert background. Default is a vibrant green.
        const alertBg = '#00AA00';

        // Hotseat background colour. Default is a fiery, fiery orange.
        const hotseatBg = '#aa1100';

        // The emoji that surrounds the hotseat messages.
        const hotseatEmoji = 'ðŸ”¥';

        // Start displaying timed messages as soon as the source is added? '!timed on', '!timed true' or '!timed start' will start them if not.
        const timedMessagesAtStart = false;

        // The timed messages to rotate through displaying
        const timedMessages = ['Timed message 1',
                               'Timed message 2',
                               'Timed message 3'];

        // Display each timed message for this many seconds
        const timedDisplaySeconds = 3;

        // Wait this many seconds after removing a timed message to display another one
        const timedGapSeconds = 3;

        // Follow the instructions in README.md
        
    </script>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="jquery-3.4.1.min.js"></script>
    <script src="tmi.min.js"></script>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Open Sans Condensed:700">

	<style>
		#popuptext {
		    display: inline-block;
			font-family: 'Open Sans Condensed';
			font-weight: 700;
			color: white;
			font-size: 60px;
			margin: 0;
			margin-left: 15px;
			white-space: nowrap;
		}

		#popupbox {
			position: absolute;
			bottom: 20px;
            left: 20px;
			width: 0px;
			height: 82px;
			overflow: hidden;
		}
	</style>

</head>

<body>

	<div id="popupbox">
	    <h1 id="popuptext"></h1>		
	</div>

</body>
    
<script type="text/javascript">
    const opts = {
        channels: [
            twitchChannel
        ]
    };

    // Create a client with our options defined at the top of the file
    let client = new tmi.client(opts);

    // Register our event handlers (defined below)
    client.on('message', onMessageHandler);
    client.on('connected', onConnectedHandler);

    // Connect to Twitch:
    client.connect();

    //
    //
    // =========
    // ANIMATION
    // =========

    // Hotseat stuff
    let hotSeatUser = "";
    let hotSeatIsOn = false;

    let timedInterval = false;
    let timedMessagesCurrent = 0;
    if (timedMessagesAtStart == true) {
        timedInterval = timedOn();
    }
    
    // Called every time a message comes in
    function onMessageHandler(target, context, msg, self) {

        // Remove whitespace from chat message
        const commandName = msg.trim();
        
        // If the command is known, let's execute it
        if (context.mod || (context["badges-raw"] != null && context["badges-raw"].startsWith("broadcaster"))) {
            if (commandName.startsWith("!alert ")) {
                $("#popupbox").show();
                $("#popupbox").css({"background-color":alertBg}); 
                $("#popuptext").text(commandName.substr(7).toUpperCase());
                doAnimation();

            } else if (commandName.startsWith("!delete")) {
                deleteAnimation();
                $("#popuptext").text('');

            } else if (commandName.startsWith("!hotseat ")) {
                hotSeatIsOn = true;
                $("#popupbox").show();
                hotSeatUser = commandName.substr(10).toLowerCase();
                $("#popupbox").css({"background-color":hotseatBg}); 
                $("#popuptext").text(`${hotseatEmoji}  ${hotSeatUser.toUpperCase()} IS IN THE HOTSEAT ${hotseatEmoji}`);
                doAnimation();

            } else if (commandName.startsWith("!timed ")) {
                let argument = commandName.substr(7).toLowerCase();
                if (argument == 'off') {
                    if (timedInterval) {
                        clearInterval(timedInterval);
                        timedInterval = false;
                    }
                } else if (argument == 'on') {
                    if (!timedInterval) {
                        timedInterval = timedOn();
                    }
                }
            }
        }
   
        if (hotSeatIsOn) {
            if (context.username == hotSeatUser) {
                $("#popuptext").text(`${hotseatEmoji} ${context['display-name']}: ${commandName} ${hotseatEmoji}`);
                doHotseatAnimation();
            }
        }      
    }
        
    // Animate text
    const doAnimation = () => {
        const textWidth = $("#popuptext").width();
        $("#popuptext").css({"opacity":0, "margin-left":"50px"}); 
        $("#popupbox").width(1);
        $("#popupbox").animate({width:textWidth+30}, 500);
        $("#popuptext").animate({"opacity":1, "margin-left":"15px"}, 700);
    }
    
    const doHotseatAnimation = () => {
        const textWidth = $("#popuptext").width();
        $("#popuptext").css({"opacity":0, "margin-left":"50px"}); 
        $("#popupbox").css({"background-color":hotseatBg}); 
        $("#popupbox").width(1);
        $("#popupbox").animate({width:textWidth+30}, 500);
        $("#popuptext").animate({"opacity":1, "margin-left":"15px"}, 700);
    }
    
    // Animate off
    const deleteAnimation = () => {
        hotSeatIsOn = false;
        $("#popupbox").animate({width:0}, 500);
        $("#popuptext").animate({"opacity":0, "margin-left":"50px"}, 700);
    }

    // Start displaying and deleting timed messages
    function timedOn() {
        return setInterval(function() {
            if ($("#popuptext").text() == '') {
                $("#popupbox").show();
                $("#popupbox").css({"background-color":alertBg}); 
                $("#popuptext").text(timedMessages[timedMessagesCurrent]);
                doAnimation();

                setTimeout(function() {
                    if ($("#popuptext").text() == timedMessages[timedMessagesCurrent]) {
                        deleteAnimation();
                        $("#popuptext").text('');
                        if (timedMessagesCurrent < (timedMessages.length - 1)) {
                            timedMessagesCurrent++;
                        } else {
                            timedMessagesCurrent = 0;
                        }
                    }
                }, timedDisplaySeconds * 1000);
            }
        }, (timedGapSeconds + timedDisplaySeconds) * 1000);
    }
    
    function onConnectedHandler (addr, port) {
        console.log(`* Connected to ${addr}:${port}`);
    }
</script>
</html>