<!DOCTYPE HTML>
<html>
<head>

    <script type="text/javascript">

        // Change Limmy to your Twitch channel
        const twitchChannel = 'Limmy';

        // Your alert background. Default is a vibrant green
        const alertBg = '#00AA00';

        // Hotseat background colour. Default is a fiery, fiery orange.
        const hotseatBg = '#aa1100';

        // The emoji that surrounds the hotseat messages.
        const hotseatEmoji = 'üî•';

        // Voting background colour. Default is Twitch purple.
        const votingBg = '#6441a5';

        // Follow the instructions in README.md
        
    </script>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="jquery-3.4.1.min.js"></script>
    <script src="tmi.min.js"></script>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Open Sans Condensed:700">

	<style>
		#popuptext {
		    display: inline-block;
			font-family: 'Open Sans Condensed';
			font-weight: 700;
			color: white;
			font-size: 60px;
			margin: 0;
			margin-left: 15px;
			white-space: nowrap;
		}

		#popupbox {
			position: absolute;
			bottom: 20px;
            left: 20px;
			width: 0px;
			height: 82px;
			overflow: hidden;
		}
		
	</style>

</head>

<body>

	<div id="popupbox">
	    <h1 id="popuptext"></h1>		
	</div>

</body>
    
<script type="text/javascript">
    const opts = {
        channels: [
            twitchChannel
        ]
    };

    // Create a client with our options defined at the top of the file
    let client = new tmi.client(opts);

    // Register our event handlers (defined below)
    client.on('message', onMessageHandler);
    client.on('connected', onConnectedHandler);

    // Connect to Twitch:
    client.connect();

    //
    //
    // =========
    // ANIMATION
    // =========    
    

    // Hotseat stuff
    let hotSeatUser = "";
    let hotSeatIsOn = false;
    //
    
    // Voting stuff
    // Voting it pretty generic, mods can set the topic and options and users can via option numbers in chat.
    // Mods/streamer are incharge of executing results
    let votingIsOn = false;
    let voteTopic = "";
    let options = {};
    //

    // Called every time a message comes in
    function onMessageHandler(target, context, msg, self) {
        // Remove whitespace from chat message
        const commandName = msg.trim();
        
        // If the command is known, let's execute it

            if (context.mod || (context["badges-raw"] != null && context["badges-raw"].startsWith("broadcaster"))) {
                if (commandName.startsWith("!alert ")) {
                    $("#popupbox").show();
                    $("#popupbox").css({"background-color":alertBg}); 
                    $("#popuptext").text(commandName.substr(7).toUpperCase());
                    doAnimation();
                } else if (commandName.startsWith("!delete")) {
                    deleteAnimation();
                } else if (commandName.startsWith("!hotseat ")) {
                    hotSeatIsOn = true;
                    $("#popupbox").show();
                    voteTopic = commandName.substr(10);
                    $("#popupbox").css({"background-color":hotseatBg}); 
                    $("#popuptext").text(`${hotseatEmoji}  ${hotSeatUser.toUpperCase()}`);
                    doAnimation();
                } else if (commandName.startsWith("!vote ")) {
                    // Start with the topic for your vote
                    $("#popupbox").show();
                    voteTopic = commandName.substr(6).toUpperCase();
                    $("#popupbox").css({"background-color": votingBg});
                    $("#popuptext").text(`VOTE: ${voteTopic} üî¥`);
                    doAnimation();
                } else if (commandName.startsWith("!voteopt ")) {
                    // Then add your options
                    let option = commandName.substr(9).toUpperCase();
                    options[option] = {};
                } else if (commandName.startsWith("!voteoptclear")) {
                    // Made a mistake? clear and re-add your options
                    options = [];
                } else if (commandName.startsWith("!votestart") && !votingIsOn) {
                    // Once options are added, start the vote!
                    votingIsOn = true;
                    $("#popuptext").text(`VOTE: ${voteTopic} üü¢`);
                } else if (commandName.startsWith("!voteresults") && votingIsOn) {
                    // Display the results and stop the vote
                    let biggestOption = null;
                    let biggestSize = 0;
                    for (let i = 0; i < Object.keys(options).length; i++) {
                        if (Object.keys(options[Object.keys(options)[i]]).length > biggestSize) {
                            biggestOption = Object.keys(options)[i];
                            biggestSize = Object.keys(options[Object.keys(options)[i]]).length;
                        } 
                    }
                    $("#popuptext").text(`AND THE WINNER IS: ${biggestOption} üëèüëèüëè`);
                    doAnimation();
                }
            }

            if (hotSeatIsOn) {
                if (context.username == hotSeatUser){
                    $("#popuptext").text(`${hotseatEmoji} ${context['display-name']}: ${commandName} ${hotseatEmoji}`);
                    doHotseatAnimation();
                }
            }
                
            // If voting is on and the user typed somthing that can be a vote
            if (votingIsOn && /^\d+$/.test(commandName) && parseInt(commandName) <= Object.keys(options).length) {
                let vote = parseInt(commandName);
                // Loop over each option and see how many votes they have
                for (let i = 0; i < Object.keys(options).length; i++) {
                    if (i + 1 === vote) {
                        options[Object.keys(options)[i]][context.username] = true;
                    } else if (options[Object.keys(options)[i]][context.username]) {
                        delete options[Object.keys(options)[i]][context.username];
                    }
                }
            }
    }
        
    // Animate text
    const doAnimation = () => {
        const textWidth = $("#popuptext").width();
        $("#popuptext").css({"opacity":0, "margin-left":"50px"}); 
        $("#popupbox").width(1);
        $("#popupbox").animate({width:textWidth+30}, 500);
        $("#popuptext").animate({"opacity":1, "margin-left":"15px"}, 700);
    }
    
    const doHotseatAnimation = () => {
        const textWidth = $("#popuptext").width();
        $("#popuptext").css({"opacity":0, "margin-left":"50px"}); 
        $("#popupbox").css({"background-color":hotseatBg}); 
        $("#popupbox").width(1);
        $("#popupbox").animate({width:textWidth+30}, 500);
        $("#popuptext").animate({"opacity":1, "margin-left":"15px"}, 700);
    }
    
    
        
    // Animate off
    const deleteAnimation = () => {
        hotSeatIsOn = false;
        votingIsOn = false;
        options = [];
        votes = {};
        $("#popupbox").animate({width:0}, 500);
        $("#popuptext").animate({"opacity":0, "margin-left":"50px"}, 700);
    }
    

    function onConnectedHandler (addr, port) {
        console.log(`* Connected to ${addr}:${port}`);
    }
</script>
</html>