<!DOCTYPE HTML>
<html>
<head>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <script src='jquery-3.4.1.min.js'></script>
    <script src='tmi.min.js'></script>
    <link rel='stylesheet'
          href='https://fonts.googleapis.com/css?family=Open Sans Condensed:700'>

	<style>
		#popuptext {
		    display: inline-block;
			font-family: 'Open Sans Condensed';
			font-weight: 700;
			color: white;
			font-size: 60px;
			margin: 0;
			margin-left: 15px;
			white-space: nowrap;
		}

		#popupbox {
			position: absolute;
			bottom: 20px;
            left: 20px;
			width: 0px;
			height: 82px;
			overflow: hidden;
		}
		
	</style>

</head>

<body>

	<div id='popupbox'>
	    <h1 id='popuptext'></h1>		
	</div>

</body>
    
<script type='text/javascript'>
    const config = {
        channels: ['fripp03'],
        prefix: '!',
        alertBg: '#00AA00',
        hotseatBg: '#aa1100',
        hotseatEmoji: 'ðŸ”¥',
      };
      
      // Animate text
      const doAnimation = () => {
        const textWidth = $('#popuptext').width();
        $('#popuptext').css({ opacity: 0, 'margin-left': '50px' });
        $('#popupbox').width(1);
        $('#popupbox').animate({ width: textWidth + 30 }, 500);
        $('#popuptext').animate({ opacity: 1, 'margin-left': '15px' }, 700);
      };
      
      const doHotseatAnimation = () => {
        const textWidth = $('#popuptext').width();
        $('#popuptext').css({ opacity: 0, 'margin-left': '50px' });
        $('#popupbox').css({ 'background-color': config.hotseatBg });
        $('#popupbox').width(1);
        $('#popupbox').animate({ width: textWidth + 30 }, 500);
        $('#popuptext').animate({ opacity: 1, 'margin-left': '15px' }, 700);
      };
      
      // Animate off
      const deleteAnimation = () => {
        hotSeatIsOn = false;
        $('#popupbox').animate({ width: 0 }, 500);
        $('#popuptext').animate({ opacity: 0, 'margin-left': '50px' }, 700);
      };
      
      // Create a client with our options defined at the top of the file
      const client = new tmi.client({ connection: { reconnect: true }, channels: config.channels });
      
      
      let hotSeatUser = '';
      let hotSeatIsOn = false;
      
      // Called every time a message comes in
      const onMessageHandler = (target, context, msg, self) => {
        if (hotSeatIsOn) {
          if (context.username === hotSeatUser) {
            $('#popuptext').text(`${config.hotseatEmoji} ${context['display-name']}: ${msg} ${config.hotseatEmoji}`);
            doHotseatAnimation();
          }
        }
      
        if (!msg.startsWith(config.prefix) || (!context.mod && !context.badges.broadcaster)) return;
      
        // slices prefix and splits message into array !alert hello there => ['alert', 'hello', 'there']
        const args = msg.slice(config.prefix.length).split(/ +/);
        const command = args.shift().toLowerCase();
      
        if (command === 'alert') {
          $('#popupbox').show();
          $('#popupbox').css({ 'background-color': config.alertBg });
          $('#popuptext').text(args.join(' '));
          doAnimation();
        }
      
        if (command === 'hotseat') {
          hotSeatIsOn = true;
          $('#popupbox').show();
          hotSeatUser = args.join(' ');
          $('#popupbox').css({ 'background-color': config.hotseatBg });
          $('#popuptext').text(`${config.hotseatEmoji}  ${hotSeatUser.toUpperCase()} IS IN THE HOTSEAT ${config.hotseatEmoji}`);
          doAnimation();
        }
      
        if (command === 'delete') deleteAnimation();
      };
      
      const onConnectedHandler = (addr, port) => {
        console.log(`* Connected to ${addr}:${port}`);
      };
      
      // Register our event handlers (defined above)
      client.on('message', onMessageHandler);
      client.on('connected', onConnectedHandler);
      
      client.connect();
      
</script>
</html>
